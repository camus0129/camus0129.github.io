<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客搭建步骤</title>
    <url>/2020/08/03/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>在本地安装好了node.js及hexo之后，就可以开始着手搭建博客了<br>首先打开git-bash,在想要放置站点的位置执行如下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init foldername</span><br></pre></td></tr></table></figure>

<p>就会在当前目录新建foldername的文件夹并初始化</p>
<p>切换到新建的foldername目录，然后执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>然后执行如下代码，生成静态的html文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>然后执行如下代码，启动本地服务器用于调试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>在浏览器打开如下页面<code>http://localhost:4000</code>,如果能正常的看渲染的页面，则基础的hexo就跑起来了，<br>否则有提示缺少一些不要的node module的情况下，需要手动单独安装。</p>
<p>切换到站点所有目录的themes目录，输入如下代码安装meadow主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;kb1000fx&#x2F;Meadow</span><br></pre></td></tr></table></figure>

<p>然后修改站点所在目录的_config.yml的theme字段，修改为meadow,然后清除配置，重新生成静态html.</p>
<p>通过浏览器预览，可以看到主题已经更改了。</p>
<p>根据meadow主题的说明文档，修改相关配置项目.</p>
<p>如果需要部署到服务器的话，则需要安装如下包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-dployer-git --save</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Excel篇</title>
    <url>/2020/07/15/VBA%E5%BA%94%E7%94%A8%E4%B9%8BExcel%E7%AF%87/</url>
    <content><![CDATA[<p>Hi，大家好，前面几期介绍了VBA在Word上的常见的应用，今天开始看看VBA在Excel上的应用，这个也是很多人用VBA进行自动化操作的的主要的应用场景。</p>
<p>Excel表上有大量众多的数据单元格，每个单元格都是独立的，并且使用了横纵坐标来表示，这样就为使用VBA代码来处理Excel的数据提供了绝佳的运行环境,大大增强了处理Excel表格的能力。</p>
<p>要处理Excel表格里面的数据，首先的步骤是要打开Excel，然后定位到需要处理的表格。</p>
<p>步骤看起来很简单，但是用代码实现的话，则跟Word一样，需要对Excel文档及表格进行抽象，在Word中是使用Document对象来表示Word文档，显然Excel中也需要一个类似的对象来表示。</p>
<p>在Excel中，表示整个Excel文档的是Workbook对象，而对于Excel文档中的每一张表，则用Worksheet对象来表示。</p>
<p>通过对Workbook的及Worksheet对象的操作，就可以控制到对应的Excel文档及里面的表格</p>
<p>下面通过一个具体的例子，看看针对Workbook的基本操作，具体的代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> xsltest()</span><br><span class="line"><span class="keyword">Dim</span> Newxls As Workbook</span><br><span class="line"><span class="keyword">Set</span> Newxls = Workbooks.Add</span><br><span class="line">Newxls.Worksheets(<span class="number">1</span>).Name = <span class="string">&quot;MyFirstsheet&quot;</span></span><br><span class="line">Newxls.SaveAs Filename:=<span class="string">&quot;F:\MyFisrtxls.xls&quot;</span></span><br><span class="line">Newxls.Close</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>为了避免不必要的环境问题，我们需要将这段代码复制粘贴到基于的Excel文档的VBA代码编辑窗口中。</p>
<p>首先新建Excel文档，然后另存为后缀名xlsm格式的文件，然后重新打开xlsm的文件，找到VBA代码编辑窗口，复制后如下图所示：</p>
<p><img src="/resource/14_1.png"></p>
<p>这里有一点不同于Word的VBA代码编辑窗口的地方，左上角是有Sheet1及ThisWorkbook两个对象，并且双击之后都会弹出VBA代码编辑窗口，复制到任何一个代码编辑窗口都是可以的，这里演示的是是复制到了ThisWorkbook的代码编辑窗口。</p>
<p>点击运行按钮，执行此段代码后，会在F盘的根目录下生成一个MyFirstxls.xls文件，同时生成的MyFirstxls.xls文件里面的默认的表格名修改为了MyFirstsheet，如下图所示：</p>
<p><img src="/resource/14_2.png"></p>
<p>代码看起来很简单，下面详细讲解一下对应的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub xsltest()</span><br><span class="line"></span><br><span class="line">&#39;定义一个新的工作簿的变量</span><br><span class="line">Dim Newxls As Workbook</span><br><span class="line"></span><br><span class="line">&#39;新建一个工作簿并将定义的工作簿变量关联起来</span><br><span class="line">Set Newxls &#x3D; Workbooks.Add</span><br><span class="line"></span><br><span class="line">&#39;将新建的工作簿中的第一个工作表的名字重新命名为MyFirstsheet</span><br><span class="line">Newxls.Worksheets(1).Name &#x3D; &quot;MyFirstsheet&quot;</span><br><span class="line"></span><br><span class="line">&#39;将新建的工作簿另存到F盘根目录，并命名为MyFirstxls.xls</span><br><span class="line">Newxls.SaveAs Filename:&#x3D;&quot;F:\MyFisrtxls.xls&quot;</span><br><span class="line"></span><br><span class="line">&#39;关闭新建的工作簿</span><br><span class="line">Newxls.Close</span><br><span class="line"></span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<p>觉得有用吗？想了解更多吗 ？下方扫码关注喔！<img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Excel篇续2</title>
    <url>/2020/07/16/VBA%E5%BA%94%E7%94%A8%E4%B9%8BExcel%E7%AF%87%E7%BB%AD2/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了VBA在Excel上的基本的文件操作，例如新建,另存为，重命名等操作。</p>
<p>有了之前的Excel文件操作的基础了，就可以进一步的学习激动人心的Excel的单元格的操作。</p>
<p>同样，VBA也对单元格进行了抽象，使用Worksheet对象的Cells属性来表示工作表的所有的单元格。</p>
<p>如果Cells属性带上横纵坐标的参数，则表示对应的横纵坐标的单元格。这里说的横纵坐标就是对应Excel上的第多少列和多少行，因此通过Cells属性及横纵坐标的参数，就可以访问Excel表格中任意一个单元格。</p>
<p>通过坐标以及此前介绍的循环，就可以批量访问任意的单元格了。</p>
<p>下面通过一个具体的例子，看看通过VBA代码对单元格实行操作,具体代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Multi_Table()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> i As Integer</span><br><span class="line"><span class="keyword">Dim</span> j As Integer</span><br><span class="line"><span class="keyword">Dim</span> rng As Range</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> rng = Sheet1.Cells(<span class="number">9</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">With</span> rng</span><br><span class="line">.Font.Bold = <span class="literal">True</span></span><br><span class="line">.Font.Italic = <span class="literal">True</span></span><br><span class="line">.Font.Size = <span class="number">20</span></span><br><span class="line">.Value = <span class="string">&quot;九九乘法表&quot;</span></span><br><span class="line">.Columns.AutoFit</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> <span class="number">9</span></span><br><span class="line"> <span class="keyword">For</span> j = <span class="number">1</span> <span class="keyword">To</span> i</span><br><span class="line"> Sheet1.Cells(<span class="number">10</span> + i, <span class="number">10</span> + j) = j &amp; <span class="string">&quot; * &quot;</span> &amp; i &amp; <span class="string">&quot; = &quot;</span> &amp; j * i</span><br><span class="line"> Sheet1.Range(Sheet1.Cells(<span class="number">10</span> + i, <span class="number">10</span> + j), Sheet1.Cells(<span class="number">10</span> + i, <span class="number">10</span> + j)).Columns.AutoFit</span><br><span class="line"> <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制粘贴上述代码到Excel的中Sheet1的VBA的代码编辑窗口，如下图所示：</p>
<p><img src="/resource/15_1.png"></p>
<p>点击运行按钮，运行此子过程代码，运行结果如下图所示：</p>
<p><img src="/resource/15_2.png"></p>
<p>代码看起来有点多，但很多实际上都只是在设置字体，字号什么的，真正打印的九九乘法表仅仅几行代码就可以了。</p>
<p>下面详细的注释一下相关的代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Multi_Table()</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;定义几个控制变量，用于循环控制</span></span><br><span class="line"><span class="keyword">Dim</span> i As Integer</span><br><span class="line"><span class="keyword">Dim</span> j As Integer</span><br><span class="line"><span class="keyword">Dim</span> rng As Range</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;为了便于下面的设置，这里将第9行，第15列单元格绑定到Range对象上</span></span><br><span class="line"><span class="keyword">Set</span> rng = Sheet1.Cells(<span class="number">9</span>, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;对第9行，15列单元格进行设置</span></span><br><span class="line"><span class="keyword">With</span> rng</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置该单元格内容加粗</span></span><br><span class="line">.Font.Bold = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置该单元格内容斜体</span></span><br><span class="line">.Font.Italic = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置该单元格字号为20</span></span><br><span class="line">.Font.Size = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置该单元格的内容为“九九乘法表”</span></span><br><span class="line">.Value = <span class="string">&quot;九九乘法表&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置该单元格列宽为自适应，防止文字太长显示不全</span></span><br><span class="line">.Columns.AutoFit</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;循环设置九九乘法表对应的各个单元格，并设置对应单元格列宽为自适应</span></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> <span class="number">9</span></span><br><span class="line"> <span class="keyword">For</span> j = <span class="number">1</span> <span class="keyword">To</span> i</span><br><span class="line"> Sheet1.Cells(<span class="number">10</span> + i, <span class="number">10</span> + j) = j &amp; <span class="string">&quot; * &quot;</span> &amp; i &amp; <span class="string">&quot; = &quot;</span> &amp; j * i</span><br><span class="line"> Sheet1.Range(Sheet1.Cells(<span class="number">10</span> + i, <span class="number">10</span> + j), Sheet1.Cells(<span class="number">10</span> + i, <span class="number">10</span> + j)).Columns.AutoFit</span><br><span class="line"> <span class="keyword">Next</span></span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>觉得有用吗？想了解更多吗 ？下方扫码关注喔！<img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Excel篇续3</title>
    <url>/2020/07/23/VBA%E5%BA%94%E7%94%A8%E4%B9%8BExcel%E7%AF%87%E7%BB%AD3/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了VBA在Excel上的单元格的常见操作，主要涉及到单元格的访问，单元格内容字体格式设置等等，并最终通过生成一个九九乘法表的例子讲解了相关的代码。</p>
<p>我们生成的单元格内容都是静态的，生成一次之后就没有更新了，是否有办法定时更新相关的内容，然后及时的通过单元格显示出来呢？</p>
<p>需要定时更新的话，则需要涉及到定时器的使用，但是VBA中并没有直接提供定时器功能，要想实现定时功能，则需要通过其他的相关的功能，模拟实现定时器类似的功能。</p>
<p>要实现模拟定时器功能，则需要涉及到一个新的对象—-Application对象.   Application是对应用程序的一种抽象。</p>
<p>不同的应用程序的Application对象是不一样的，在Excel中，Application对象代表整个Excel应用程序，在Word中，则代表整个Word应用程序。</p>
<p>Application的OnTime功能可以指定一个子程序在将来的特定时间运行,利用这个特性，在子程序里面在实现对自身子程序的定时调用，从而间接实现定时功能。</p>
<p>但是这里有个特殊的地方是如果通过Application对象调用子程序，相关的宏代码所放置的位置与我们此前放置的workbook或者Worksheet的代码编辑区是不一样的，如果还是放置在此前的位置，是无法自动运行，会报无法找到宏的错误，需要单独放置在新建模块里面。</p>
<p>模块，也是一个代码块，只是这个代码块的代码是可以导出为一个文件，可以供其他的代码调用的，就像是VBA提供的系统的功能一样，简单的说，就是可以复用的自定义功能。</p>
<p>根据上述实现定时器原理，下面通过一个简单的例子，看看具体是如何实现的：</p>
<p>首先在Excel的VBA集成开发环境的左上角工程资源管理器空白处点击鼠标右键，然后选择插入模块，如下图所示：</p>
<p><img src="/resource/16_1.png"></p>
<p>上述步骤会自动添加一个新的模块1,双击模块1,打开模块1的代码编辑窗口，复制粘贴如下代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> startshowtime()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> rng As Range</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> rng = Sheet1.Cells(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">rng.Font.Size = <span class="number">14</span></span><br><span class="line">rng.NumberFormatLocal = <span class="string">&quot;hh:mm:ss&quot;</span></span><br><span class="line">rng.Value = <span class="built_in">Now</span></span><br><span class="line">rng.Columns.AutoFit</span><br><span class="line">Application.OnTime <span class="built_in">Now</span> + <span class="built_in">TimeValue</span>(<span class="string">&quot;00:00:01&quot;</span>), <span class="string">&quot;startshowtime&quot;</span>, , <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> stopshowtime()</span><br><span class="line">Application.OnTime <span class="built_in">Now</span> + <span class="built_in">TimeValue</span>(<span class="string">&quot;00:00:01&quot;</span>), <span class="string">&quot;startshowtime&quot;</span>, , <span class="literal">False</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>添加对应代码到模块1后如下图所示：</p>
<p><img src="/resource/16_2.png"></p>
<p>切换到Excel表窗口，点击开发工具菜单栏，点击开发工具菜单栏下宏安全按键，在弹出的信任中心的宏安全设置中，确保宏设置为启用所有宏选项，如下图所示：</p>
<p><img src="/resource/16_3.png"></p>
<p>重新切回到模块1的代码编辑环境，选中startshowtime子程序，然后点击运行按钮，运行该子程序,可以看到在Excel的Sheet1表的H8单元格显示当前时间，并且是持续变化的，点击运行stopshowtime,则会停止定时器，显示停止定时器之前的时间，如图所示：</p>
<p><img src="/resource/16_4.png"></p>
<p>下面注释一下相关的代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;强制显示声明模块中的所有变量，没有声明的变量使用会报错</span></span><br><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> startshowtime()</span><br><span class="line"></span><br><span class="line">’声明一个Range变量</span><br><span class="line"><span class="keyword">Dim</span> rng As Range</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置Range变量为第8行第8列单元格，也就是H8单元格</span></span><br><span class="line"><span class="keyword">Set</span> rng = Sheet1.Cells(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置单元格字体大小为14</span></span><br><span class="line">rng.Font.Size = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 设置单元格显示内容的格式为时间格式“hh:mm:ss”</span></span><br><span class="line">rng.NumberFormatLocal = <span class="string">&quot;hh:mm:ss&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置单元格显示内容为当前时间</span></span><br><span class="line">rng.Value = <span class="built_in">Now</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置单元格为自适应列宽</span></span><br><span class="line">rng.Columns.AutoFit</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 在当前时间基础上，延后1秒运行startshowtime子程序</span></span><br><span class="line">Application.OnTime <span class="built_in">Now</span> + <span class="built_in">TimeValue</span>(<span class="string">&quot;00:00:01&quot;</span>), <span class="string">&quot;startshowtime&quot;</span>, , <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Public</span> <span class="keyword">Sub</span> stopshowtime()</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;停止运行startshowtime子程序</span></span><br><span class="line">Application.OnTime <span class="built_in">Now</span> + <span class="built_in">TimeValue</span>(<span class="string">&quot;00:00:01&quot;</span>), <span class="string">&quot;startshowtime&quot;</span>, , <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>这里仅仅通过定时器显示了当前的时间，大家可以在此基础上扩充相关功能，并修改定时时间，完成更复杂的功能，并可以导出模块为.bas文件，供其他的人调用。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！<img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Outlook篇</title>
    <url>/2020/07/27/VBA%E5%BA%94%E7%94%A8%E4%B9%8BOutlook%E7%AF%87/</url>
    <content><![CDATA[<p>Hi，大家好，前面几期介绍了VBA在Word和Excel的上的一些基础应用，虽然绝大部分的应用都是在Excel上，但是利用VBA代码批量生成邮件，添加附件，自动发邮件的这些需求，也是在日常的工作中会经常遇到的，这里介绍下如何使用VBA调用Outlook发送邮件。</p>
<p>要想利用Outlook发送邮件，则首先需要设置Outlook邮件收发功能，添加邮箱账号，设置好收发邮件服务器地址及端口，确保Outlook能够正常的收发邮件，具体的设置方法及参数因邮件服务器不同而不同，这里就不赘述了。</p>
<p>要想利用VBA代码控制Outlook发送邮件，需要对Outlook应用程序在VBA代码中进行抽象，像此前的Word/Excel一样，VBA代码中同样使用application的对象来代表Outlook应用程序。</p>
<p>但是之前说过，VBA的代码可能更多的是运行在Word/Excel中，此时默认的appliction代表着Word/Excel的应用，若要同时打开或者切换到Outlook上，则需要使用代码创建一个application对象，并将其关联Outlook应用程序上。</p>
<p>之后就像是我们正常使用Outlook一样，通过VBA代码新建邮件，然后设置邮件的主题，收件人，编写邮件正文，然后添加附件等操作，检查无误后点击发送，即可将邮件发送出去。</p>
<p>下面通过一个简单的例子，看看具体的代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Sent_Mail()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> olobj As Object</span><br><span class="line"><span class="keyword">Dim</span> mailobj As Object</span><br><span class="line"><span class="keyword">Dim</span> myattachments As Outlook.Attachments</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> olobj = <span class="built_in">CreateObject</span>(<span class="string">&quot;outlook.application&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> mailobj = olobj.CreateItem(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">With</span> mailobj</span><br><span class="line"></span><br><span class="line">    .<span class="keyword">To</span> = <span class="string">&quot;xyz@abc.com&quot;</span></span><br><span class="line"></span><br><span class="line">    .Subject = <span class="string">&quot;年度收入统计&quot;</span></span><br><span class="line">    </span><br><span class="line">    .BodyFormat = olFormatHTML</span><br><span class="line">    .HTMLBody = <span class="string">&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt;&quot;</span> &amp; <span class="string">&quot;xxxx同事&quot;</span> &amp; <span class="string">&quot;:&lt;/p&gt; &lt;p style=&#x27;text-indent: 2em;&#x27;&gt; 您好,附件为您2019年&lt;b style=&#x27;background-color:#00FF00&#x27;&gt;年度&lt;/b&gt;收入统计，请查收！&lt;b style=&#x27;background-color:#00FF00&#x27;&gt;文档请下载后查看，以防乱码&lt;/b&gt;，密码为姓名全称的拼音，如：张小明：zhangxiaoming。&lt;/p&gt;&lt;p&gt;&lt;u&gt;注意：个人工资及奖金属保密事项，泄露自己或私下打探，议论其他人员工资情况者，经查证属实后将予以降级或辞退处理。如您有任何疑问，可与所在单位薪酬负责人联系咨询。&lt;/u&gt;&lt;/p&gt; &lt;p&gt; &lt;b&gt;祝：新春愉快！&lt;/b&gt;&lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;</span></span><br><span class="line">    </span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> myattachments = mailobj.Attachments</span><br><span class="line">    myattachments.Add <span class="string">&quot;F:\附件.docx&quot;</span></span><br><span class="line">    </span><br><span class="line">    mailobj.Send</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制粘贴上述代码到Excel的VBA代码编辑环境中(这里我们主要是模拟通过Excel调用Outlook发送邮件)，如下图所示：</p>
<p><img src="/resource/17_1.png"></p>
<p>为了确保能收到邮件，这里大家需要将代码中.To 后面的”<a href="mailto:&#120;&#x79;&#122;&#x40;&#x61;&#98;&#x63;&#x2e;&#99;&#x6f;&#x6d;">&#120;&#x79;&#122;&#x40;&#x61;&#98;&#x63;&#x2e;&#99;&#x6f;&#x6d;</a>“替换为所需要的发送的邮件收件人。</p>
<p>因Excel默认没有引用Outlook应用程序对象库，因此，在第一次使用的时候，需要手动添加Outlook对象的应用，添加的方法也很简单，点击VBA编程环境的”工具”栏，点击”引用”，然后再弹出的对话框中，找到”Microsoft  Outlook 15.0 Object Library”，确保前面的复选框是选中状态，然后点击确定，关闭对话框,如下图所示：</p>
<p><img src="/resource/17_2.png"></p>
<p>点击运行按钮，运行”Send_Mail” 子程序，此时有可能会弹出安全提醒，如下图所示：</p>
<p><img src="/resource/17_3.png"></p>
<p>此时选择点击允许，继续发送邮件，发送成功后，稍等片刻，检查对应的邮箱的收件箱，可以看到收到如下图所示邮件：</p>
<p><img src="/resource/17_4.png"></p>
<p>下面通过对代码进行详细的注释，一起看看具体发送邮件的过程：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Sent_Mail()</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;分别定义Outlook,邮件及附件对象变量</span></span><br><span class="line"><span class="keyword">Dim</span> olobj As Object</span><br><span class="line"><span class="keyword">Dim</span> mailobj As Object</span><br><span class="line"><span class="keyword">Dim</span> myattachments As Outlook.Attachments</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;创建Outlook应用程序并与Outlook对象变量关联</span></span><br><span class="line"><span class="keyword">Set</span> olobj = <span class="built_in">CreateObject</span>(<span class="string">&quot;outlook.application&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;创建邮件对象并与邮件对象关联</span></span><br><span class="line"><span class="keyword">Set</span> mailobj = olobj.CreateItem(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;对新创建的邮件对象进行设置</span></span><br><span class="line"> <span class="keyword">With</span> mailobj</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置收件人</span></span><br><span class="line">    .<span class="keyword">To</span> = <span class="string">&quot;xyz@abc.com&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&#x27;设置邮件主题</span></span><br><span class="line">    .Subject = <span class="string">&quot;年度收入统计&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&#x27;设置邮件正文格式为HTML格式    </span></span><br><span class="line">    .BodyFormat = olFormatHTML</span><br><span class="line">    </span><br><span class="line"><span class="comment">&#x27;设置邮件正文，邮件中的标记为HTML标记，主要为着色，下划线等格式设置    </span></span><br><span class="line">    .HTMLBody = <span class="string">&quot;&lt;HTML&gt;&lt;BODY&gt;&lt;p&gt;&quot;</span> &amp; <span class="string">&quot;xxxx同事&quot;</span> &amp; <span class="string">&quot;:&lt;/p&gt; &lt;p style=&#x27;text-indent: 2em;&#x27;&gt; 您好,附件为您2019年&lt;b style=&#x27;background-color:#00FF00&#x27;&gt;年度&lt;/b&gt;收入统计，请查收！&lt;b style=&#x27;background-color:#00FF00&#x27;&gt;文档请下载后查看，以防乱码&lt;/b&gt;，密码为姓名全称的拼音，如：张小明：zhangxiaoming。&lt;/p&gt;&lt;p&gt;&lt;u&gt;注意：个人工资及奖金属保密事项，泄露自己或私下打探，议论其他人员工资情况者，经查证属实后将予以降级或辞退处理。如您有任何疑问，可与所在单位薪酬负责人联系咨询。&lt;/u&gt;&lt;/p&gt; &lt;p&gt; &lt;b&gt;祝：新春愉快！&lt;/b&gt;&lt;/p&gt;&lt;/BODY&gt;&lt;/HTML&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;创建邮件附件对象并与附件变量关联</span></span><br><span class="line">    <span class="keyword">Set</span> myattachments = mailobj.Attachments</span><br><span class="line">    </span><br><span class="line"><span class="comment">&#x27;添加邮件附件</span></span><br><span class="line">    myattachments.Add <span class="string">&quot;F:\附件.docx&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&#x27;发送邮件</span></span><br><span class="line">    mailobj.Send</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>其中附件的添加是可选的，如不需要附件，可删除附件相关的对象变量及添加附件相关的代码部分。</p>
<p>觉得有用吗？想了解更多吗 ？下方扫码关注喔！<img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Word篇</title>
    <url>/2020/06/22/VBA%E5%BA%94%E7%94%A8%E4%B9%8BWord%E7%AF%87/</url>
    <content><![CDATA[<p>Hi，大家好，前面几期介绍了VBA的编程基础，大家都掌握了吗？戳这里回顾VBA编程基础</p>
<p>今天我们就要开始VBA编程的实际应用了，这里我们先从Word开始，看看VBA如何应用在Word文档上面。</p>
<p>我们先回想一下自己平时使用Word的情形，发现我们绝大部分使用Word的场景都是新建或打开已经存在的Word文档，然后开始一些编辑操作，例如增加，删除，查找，替换及排版等操作，操作完成之后，再保存退出Word.</p>
<p>如果上述的这些针对文档的操作仅仅是操作有限的几份文档，那完全可以手动依次打开，然后修改完保存就可以了，但是如果是成千上万份呢？手动修改就太麻烦了。</p>
<p>假如现在有500份Word文档，需要批量修改文档里面出现的一个日期的任务，那么我们可以通过此前学过的VBA编程基础来处理这样的问题。</p>
<p>首先，我们需要通过遍历循环，来遍历每一份Word文档，这样就能确保每一份文档都能访问到。</p>
<p>其次，我们需要在遍历循环的循环体中，针对遍历的每一份Word文档，需要执行如下操作：</p>
<ol>
<li>执行打开文档的操作，</li>
<li>执行查找日期的操作，然后对查找到的日期执行替换操作，</li>
<li>保存，并关闭文档</li>
</ol>
<p>因此，编程的思路明确了，剩下的就是用具体的代码实现，也就是如何编写VBA代码操作Word文档。</p>
<p>虽然这些步骤看起来挺容易，但是里面涉及到的东西还是挺多的，还是要慢慢来，打好基础。</p>
<p>这里需要引入一个概念—对象，对象是对具体的物体在计算机中的一种抽象，简单来说就是计算机用来表示各种各样的物体，可以理解为一种自定义的变量类型,与我们此前接触到的变量类型类似。</p>
<p>在VBA中，Word是用Document对象来表示的，因此，对于文档的操作，都是可以通过对Document对象的操作来完成的。</p>
<p>但是我们有时候同时打开了多个文档，这种情况下，多个文档则是通过Documents集合来表示的，Documents包含所有打开的文档。</p>
<p>既然有打开文档，那么相对应的就有关闭文档的操作，同时，在关闭的时候，我们可能还涉及到了保存及另存为等操作，这些都是可以通过文档对象来操作的。</p>
<p>下面通过一个具体的例子，来演示一下如下新建并打开文档，然后保存文档，具体的代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Wordtest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> Mydoc As Document</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> Mydoc = Documents.Add</span><br><span class="line"></span><br><span class="line">Mydoc.SaveAs2 FileName:=<span class="string">&quot;D:\myFirstdoc.doc&quot;</span></span><br><span class="line"></span><br><span class="line">Debug.Print Mydoc.Name &amp; <span class="string">&quot;保存到&quot;</span> &amp; Mydoc.FullName</span><br><span class="line"></span><br><span class="line">Mydoc.Close</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制粘贴上面的代码到VBA代码编辑窗口，如下图所示：</p>
<p><img src="/resource/11_1.png"></p>
<p>点击运行按钮，执行子程序，看到这次的运行如下：</p>
<p><img src="/resource/11_2.png"></p>
<p>其中立即窗口的输出是为了方便调试打印出来的，实际上这里的运行结果是在电脑的D盘根目录生成了一个名叫myFirstdoc.doc的文档。</p>
<p>怎么样，是不是很神奇？通过简单的几行代码就新建并重命名了一个新的文档。</p>
<p>下面来逐句解释一下上述的代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Wordtest()</span><br><span class="line"></span><br><span class="line">Dim Mydoc As Document        //定义一个文档对象变量，变量名字为Mydoc</span><br><span class="line"></span><br><span class="line">Set Mydoc = Documents.Add    //新建一个文档，并将此文档绑定到此前定义的变量上面，后续通过变量即可操作文档</span><br><span class="line"></span><br><span class="line">Mydoc.SaveAs2 FileName:=&quot;D:\myFirstdoc.doc&quot;  //将新建文档重命名为myFirstdoc.doc并保存到D盘根目录</span><br><span class="line"></span><br><span class="line">Debug.Print Mydoc.Name &amp; &quot;保存到&quot; &amp; Mydoc.FullName    //调试输出新建的文档的名字及保存路径</span><br><span class="line"></span><br><span class="line">Mydoc.Close        //关闭文档</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>代码里面的文件名和保存的路径可以根据自己的需求随意更换的，如果不写明保存路径，默认是保存到当前用户的我的文档目录下的。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Word篇续2</title>
    <url>/2020/07/06/VBA%E5%BA%94%E7%94%A8%E4%B9%8BWord%E7%AF%87%E7%BB%AD2/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了VBA在Word上的应用，主要是介绍了如何使用VBA的文件操作，例如新建文档，重命名及另存为等操作。</p>
<p>除了上述的文件操作，还有很大一部分操作是文件编辑操作，这个也是可以通过VBA来实现的。</p>
<p>再介绍使用VBA编辑操作之前，需要介绍一个新的概念—Range对象。</p>
<p><strong>Range对象</strong></p>
<p>表示的是文档中的一个连续的区域，由一个起始字符位置和终止字符位置确定。</p>
<p>简单来说，就是用来表示Word文档中的一个连续的区域。例如从第1个字符到第10个字符，这个就表示一个区域。</p>
<p>从Range对象的定义来看，其实定义的是一个范围，因此，这个对象与这个范围里面的内容是无关的，只与起始字符位置，终止字符位置有关系。</p>
<p>定义了Range对象之后，就可以在Range对象定义区域的基础上进行编辑操作了</p>
<p>Range对象支持很多操作，例如加粗，修改字体，复制，剪切，粘贴，插入，语法检查，拼写检查等操作。</p>
<p>下面通过一个简单的例子，演示一下如何通过脚本插入一段文本内容。</p>
<p>具体的代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> InsertTextAfterRange()</span><br><span class="line"> <span class="keyword">Dim</span> rngDoc As Range</span><br><span class="line"> <span class="keyword">Dim</span> lastwords As Integer</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">Set</span> rngDoc = ActiveDocument.Range(start:=<span class="number">0</span>, <span class="keyword">End</span>:=<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"> rngDoc.InsertAfter <span class="string">&quot;Hi,大家好,这是我第一个使用脚本自动生成的文本!&quot;</span></span><br><span class="line"></span><br><span class="line"> lastwords = rngDoc.Characters.Count</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">Set</span> rngDoc = ActiveDocument.Range(start:=<span class="number">0</span>, <span class="keyword">End</span>:=lastwords)</span><br><span class="line"> </span><br><span class="line"> rngDoc.Bold = <span class="literal">True</span></span><br><span class="line"> rngDoc.Italic = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制上述代码到word文档的VBA代码编辑窗口，如下图所示：</p>
<p><img src="/resource/12_1.png"></p>
<p>点击运行按键，运行此子程序，运行结果如下图所示：</p>
<p><img src="/resource/12_2.png"></p>
<p>可以看到，这次立即窗口没有任何的输出，返回到对应打开的Word文档，可以看到，在文档的开头，插入了一段斜体加粗的文本。</p>
<p>下面详细的解释一下相对应的代码：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> InsertTextAfterRange()</span><br><span class="line"> <span class="keyword">Dim</span> rngDoc As Range</span><br><span class="line"> <span class="keyword">Dim</span> lastwords As Integer</span><br><span class="line"></span><br><span class="line"> <span class="comment">&#x27;设置Range对象的起始点和结束点为当前活动文本的第0个字节</span></span><br><span class="line"> <span class="keyword">Set</span> rngDoc = ActiveDocument.Range(start:=<span class="number">0</span>, <span class="keyword">End</span>:=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;在Range对象后面插入一段文本</span></span><br><span class="line"> rngDoc.InsertAfter <span class="string">&quot;Hi,大家好,这是我第一个使用脚本自动生成的文本!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;统计插入文本后Range对象有多少个字符</span></span><br><span class="line"> lastwords = rngDoc.Characters.Count</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;重新设置Rang对象，起始点依然为0,终点为此前插入的文本的最后一个字符</span></span><br><span class="line"> <span class="keyword">Set</span> rngDoc = ActiveDocument.Range(start:=<span class="number">0</span>, <span class="keyword">End</span>:=lastwords)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;设置Range对象的加粗属性和斜体属性</span></span><br><span class="line"> rngDoc.Bold = <span class="literal">True</span></span><br><span class="line"> rngDoc.Italic = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>通过对应的代码解释我们可以看到代码操作主要分以下步骤：</p>
<ol>
<li>设置好文本的插入点</li>
<li>插入所需的文本</li>
<li>重新调整需要设置加粗和倾斜的字体的区域，这里我们所选定的区域是对所插入的整个文本执行加粗和倾斜的操作</li>
<li>对设置的区域进行加粗和倾斜操作</li>
</ol>
<p>整体的操作还是很简单的，通过调整Range的区域的大小，还是可以对加粗，倾斜的文本范围进行进一步的调整，感兴趣的可以调整代码试一试。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！ </p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA应用之Word篇续3</title>
    <url>/2020/07/13/VBA%E5%BA%94%E7%94%A8%E4%B9%8BWord%E7%AF%87%E7%BB%AD3/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了VBA在Word上的基于Range对象的文件编辑操作，今天介绍另外一种在Word中对文档进行操作的对象—Selection对象。</p>
<p><strong>Selection对象</strong></p>
<p>在编辑Word的时候，我们如果要对某部分文字进行排版等操作，首先会对需要操作的部分进行选定，然后再对选定的文本进行操作，那么选定的文本对应到VBA的代码中，就是Selection对象了。</p>
<p>Selection对象与Range对象的用法很接近，Range主要针对的是某个范围，Selcetion则会对待处理的文本进行选中，选定的内容会突出显示，就像用鼠标选中的效果一样。</p>
<p>下面通过一个具体的例子看一下具体的用法，具体的代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> FindAndReplace()</span><br><span class="line"></span><br><span class="line">ActiveDocument.Content.<span class="keyword">Select</span></span><br><span class="line"></span><br><span class="line"> Selection.InsertAfter <span class="string">&quot;Hi,大家好,这是我第一个使用脚本自动生成的文本!&quot;</span></span><br><span class="line"></span><br><span class="line"> Selection.Font.Bold = <span class="literal">True</span></span><br><span class="line"> Selection.Font.Italic = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">With</span> Selection.Find</span><br><span class="line"> .Forward = <span class="literal">True</span></span><br><span class="line"> .MatchWholeWord = <span class="literal">False</span></span><br><span class="line"> .MatchCase = <span class="literal">False</span></span><br><span class="line"> .Wrap = wdFindContinue     </span><br><span class="line"> .<span class="keyword">Execute</span> FindText:=<span class="string">&quot;一&quot;</span>, ReplaceWith:=<span class="string">&quot;二&quot;</span></span><br><span class="line"> .<span class="keyword">Execute</span> FindText:=<span class="string">&quot;我&quot;</span>, ReplaceWith:=<span class="string">&quot;你&quot;</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制上述代码到VBA的代码编辑窗口，如下图所示：</p>
<p><img src="/resource/13_1.png"></p>
<p>点击运行按钮，执行这段子程序代码，可以看到结果如下图所示：</p>
<p><img src="/resource/13_2.png"></p>
<p>可以看到，运行的结果与上期使用Range的运行结果很类似，同样的操作，既可以通过Range来完成，也可以通过Selection来完成。</p>
<p>下面详细解释一下代码的含义：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> FindAndReplace()</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;选中当前活动文本的所有内容</span></span><br><span class="line">ActiveDocument.Content.<span class="keyword">Select</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;在当前选中的内容之后插入所需要的文本并选中</span></span><br><span class="line"> Selection.InsertAfter <span class="string">&quot;Hi,大家好,这是我第一个使用脚本自动生成的文本!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;将所选内容加粗和倾斜</span></span><br><span class="line"> Selection.Font.Bold = <span class="literal">True</span></span><br><span class="line"> Selection.Font.Italic = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&#x27;在所选内容中进行搜索，</span></span><br><span class="line"> <span class="keyword">With</span> Selection.Find</span><br><span class="line"> </span><br><span class="line"> <span class="comment">&#x27;设置搜索模式为向下搜索</span></span><br><span class="line"> .Forward = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&#x27;不需要全字匹配</span></span><br><span class="line"> .MatchWholeWord = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&#x27;忽略大小写</span></span><br><span class="line"> .MatchCase = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&#x27;到达搜索区域的开始或者结尾时，继续执行搜索</span></span><br><span class="line"> .Wrap = wdFindContinue</span><br><span class="line"> </span><br><span class="line"> <span class="comment">&#x27;如果找到文本&quot;一&quot;，则替换为&quot;二&quot;</span></span><br><span class="line"> .<span class="keyword">Execute</span> FindText:=<span class="string">&quot;一&quot;</span>, ReplaceWith:=<span class="string">&quot;二&quot;</span></span><br><span class="line">            </span><br><span class="line"> <span class="comment">&#x27;如果找到文本&quot;我&quot;， 则替换为&quot;你&quot;</span></span><br><span class="line"> .<span class="keyword">Execute</span> FindText:=<span class="string">&quot;我&quot;</span>, ReplaceWith:=<span class="string">&quot;你&quot;</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>从代码上面也可以看出，Selection的操作与Range几乎是一样的，相比Range的中添加文本及加粗倾斜的操作，这里额外执行了搜索替换操作，将字符”一”和”我”分别替换为了”二”和”你”。</p>
<p>这段代码中的搜索替换是可以应用在很多地方的，如果仅仅是需要搜索替换，则代码中前面插入文本的操作是可以去掉的，同时可以根据自己的需要，将需要搜索替换的文本换成自己所需要的文本</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！ </p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程应用</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA开发环境配置</title>
    <url>/2020/03/31/VBA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Hi，大家好，提到职场办公软件，绕不开的是微软的office办公套件，尤其是Word,Excel,Power Point三件套（以下简称三件套），已经成为办公领域事实的标准，并且也足够好用，但是总会有一些情况，需要重复的处理很多类似的任务，</p>
<p>虽然都是简单的步骤，但是重复的次数多了，难免感觉浪费时间，效率也不高。</p>
<p>那么问题来了，是否有工具可以批量自动完成这些任务，从而可以从繁重的体力劳动中解脱出来呢???</p>
<p>答案是肯定的，并且自动化工具还不少，很多人都推荐python来完成，python也确实可以很好的完成工作，但是需要安装配置python运行环境等等，也不是那么容易的，并且还可能不兼容，出现运行不了的情况。</p>
<p>那么是否有原生的，容易配置的工具可以利用呢？</p>
<p>答案又是肯定的，微软一直在Office中隐藏了绝世秘籍，并且在office的套件均可使用。</p>
<p>当然这么高级的功能，微软默认是隐藏的，并没有默认打开，毕竟绝大部分人都用不到，需要手动开启，开启的方法也是相当的简单，这里以office 2013的Word为例，介绍一下怎么开启绝世秘籍的方法。</p>
<p>各位，站稳扶好了，即将要修炼隐藏的武功秘籍了。</p>
<ol>
<li>新建或打开任意Word文档</li>
</ol>
<p><img src="/resource/1_1.png"></p>
<ol start="2">
<li>选择文件，选项</li>
</ol>
<p><img src="/resource/1_2.png"></p>
<ol start="3">
<li><p>选择自定义功能区，并勾上开发工具</p>
<p><img src="/resource/1_3.png"></p>
</li>
<li><p>确定，保存，在Word的选项上就可以看到多了一个开发工具选项卡</p>
<p><img src="/resource/1_4.png"></p>
</li>
</ol>
<p>怎么样？步骤是不是很简单？并且一旦开启了之后，之后打开的Word每次都会有这个选项了，Excel，Power Point的开启方式与这个大同小异，就不重复了。</p>
<p>恭喜你，你已经成功开启了office隐藏的武功秘籍，只要您早晚勤加修炼，假以时日，必能在使用office的时候如虎添翼，有如神助，喝着咖啡就能完成工作了。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！<img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA循环控制介绍</title>
    <url>/2020/06/09/VBA%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Hi，大家好，上两期介绍了流程控制里面的分支流程控制，分支流程控制主要是用于解决各种不同的情况下的问题的处理。</p>
<p>但是生活中我们除了不同的情况的处理，更多的时候我们面对的是很多重复性的操作，而重复性工作正好是电脑所擅长的。</p>
<p>为了达到让电脑自动为我们工作，就需要利用循环控制，让电脑自动循环重复，我们只需要开始的时候告诉电脑怎么做，然后剩下的就是告诉他一直重复这个步骤，然后在完成之后自动停止，这才是终极的节约时间和节省体力的法宝。</p>
<p>在VBA中大致有三种不同的形式可以完成循环的工作，三种不同的形式基本上可以互相转换，区别只是在于不同的问题，使用不同的形式，可以使得代码更简洁易懂。</p>
<p><strong>For循环</strong></p>
<p>For循环是广泛使用的一种循环，优点是结构简单易懂，根据循环的次数能否确定，可以细分为计数循环和遍历循环。</p>
<p><strong>计数循环</strong></p>
<p>计数循环需要明确知道从什么时候开始循环计数，然后到什么时候停止循环计数，对应的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">For</span> cnt = start <span class="keyword">To</span> <span class="keyword">end</span> [<span class="keyword">Step</span> <span class="keyword">step</span>]</span><br><span class="line"><span class="comment">&#x27;执行循环体语句</span></span><br><span class="line"><span class="keyword">Next</span> [cnt]</span><br></pre></td></tr></table></figure>

<p>其运行流程为从cnt= start开始计数，并执行Next 之前的循环体代码，执行完成后，cnt会加上step,如果step为正数，则检查cnt是否小于等于end，如果step为负数，则检查cnt是否大于等于end,满足条件则继续重复这一个过程，如果不满足，则退出循环。</p>
<p>其中step是可选的,系统会给出默认值，同样cnt也是可选的，单层循环可以省略。</p>
<p><strong>遍历循环</strong></p>
<p>遍历循环则不需要明确知道从什么时候开始计数，会遍历集合中的数据，逐个的取出然后执行循环体，直到遍历结束,对应的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">For</span> <span class="keyword">Each</span> element <span class="keyword">In</span> collection</span><br><span class="line"><span class="comment">&#x27;执行循环体语句</span></span><br><span class="line"><span class="keyword">Next</span> [element]</span><br></pre></td></tr></table></figure>

<p>下面通过一个具体的例子，看看For循环的实际应用。</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> Optest5()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> num As Integer</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">For</span> num = <span class="number">0</span> <span class="keyword">To</span> <span class="number">20</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">If</span> num Mod <span class="number">2</span> = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是偶数&quot;</span></span><br><span class="line"> <span class="keyword">Else</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是奇数&quot;</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">Next</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制上述代码并粘贴到VBA的代码编辑窗口，如下图所示：</p>
<p><img src="/resource/9_1.png"></p>
<p>点击运行按钮运行此代码，得到如下图所示运行结果：</p>
<p><img src="/resource/9_2.png"></p>
<p>在立即窗口可以看到，此程序打印出来了0~20的所有的奇数和偶数，下面对代码进行逐条解释一下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Optest5()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> num As Integer</span><br><span class="line"></span><br><span class="line"> <span class="keyword">For</span> num = <span class="number">0</span> <span class="keyword">To</span> <span class="number">20</span>            <span class="comment">&#x27;设置循环的循环计数从0开始到20结束，默认step为1</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">If</span> num Mod <span class="number">2</span> = <span class="number">0</span> <span class="keyword">Then</span>        <span class="comment">&#x27;对每次的循环进行取余操作，进行奇偶判断 ，否则为基数</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是偶数&quot;</span>     <span class="comment">&#x27;能被2整除，则余数了0，也就是为偶数</span></span><br><span class="line"> <span class="keyword">Else</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是奇数&quot;</span>        <span class="comment">&#x27;不能被2整除，余数不为0，为奇数</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">Next</span> num                        <span class="comment">&#x27;执行下一次循环条件判断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>可以看到，应用了循环之后，很多重复性的工作都可以放在循环体里面，通过设定好条件就可以自动执行了。</p>
<p>这里如果需要计算1000,10000等更大的数据，只需要把20替换为更大的数就可以了。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA循环控制介绍续2</title>
    <url>/2020/06/10/VBA%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D%E7%BB%AD2/</url>
    <content><![CDATA[<p>Hi，大家好，上期介绍了循环流程控制里面的For循环控制，今天再介绍另外两种循环—Loop循环及While循环。</p>
<p><strong>Loop循环</strong></p>
<p>从For循环的语法我们了解到，For循环需要预先知道要循环多少次，并将这个参数填写到For循环中去，但是如果我们不知道具体要循环多少次呢？这种条件下，我们要么就计算或者预估一个循环次数，然后做一些额外的处理，要么选择使用Loop循环来处理。</p>
<p>Loop循环可以用来处理未知循环次数的情况，只需要知道结束条件即可。</p>
<p>Loop循环根据可以细分为如下两种不同的形式：</p>
<p><strong>形式1</strong>：先判断循环条件是否满足，满足条件则执行下循环，对应的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Do</span> [<span class="keyword">While</span>][Until] Condition</span><br><span class="line"><span class="comment">&#x27;需要执行的循环体</span></span><br><span class="line"><span class="keyword">Loop</span></span><br></pre></td></tr></table></figure>

<p>这里的While和Until可以任选其一，表达的意义稍微有点不同.</p>
<p>While循环表示当条件满足时，则执行循环</p>
<p>Until循环则表示执行循环，直到满足条件，也就是说这里的条件其实是终止循环的条件，满足条件就终止循环。</p>
<p><strong>形式2：</strong>先执行一次循环体，然后判断条件，根据条件来决定是否要执行下一次循环，其对应的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Do</span> </span><br><span class="line"><span class="comment">&#x27;需要执行的循环体</span></span><br><span class="line"><span class="keyword">Loop</span> [<span class="keyword">While</span>][Until] Condition</span><br></pre></td></tr></table></figure>

<p>这里的While与Until跟意思与形式1相同，也是任选一个即可。</p>
<p><strong>While 循环</strong></p>
<p>While循环与Loop循环的形式1很类似，先判断是否满足条件，满足条件则执行循环体，对应的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">While</span> Condition</span><br><span class="line"><span class="comment">&#x27;需要执行的循环体</span></span><br><span class="line"><span class="keyword">Wend</span></span><br></pre></td></tr></table></figure>

<p>我们用一个具体的例子来看看几个不同的循环形式是怎么工作的，这里将上一期的For循环打印20以内奇偶数例子使用不同的循环重新写一遍，具体代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Optest6()</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> num As Integer</span><br><span class="line"></span><br><span class="line">Debug.Print <span class="string">&quot;Loop循环形式1:&quot;</span></span><br><span class="line"></span><br><span class="line"> num = <span class="number">0</span>            </span><br><span class="line"></span><br><span class="line"> <span class="keyword">Do</span> <span class="keyword">While</span> num &lt;= <span class="number">20</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">If</span> num Mod <span class="number">2</span> = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是偶数&quot;</span></span><br><span class="line"> <span class="keyword">Else</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是奇数&quot;</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"> num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">Loop</span></span><br><span class="line"></span><br><span class="line">Debug.Print <span class="string">&quot;Loop 循环形式2:&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Do</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">If</span> num Mod <span class="number">2</span> = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是偶数&quot;</span></span><br><span class="line"> <span class="keyword">Else</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是奇数&quot;</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"> num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Loop</span> <span class="keyword">While</span> num &lt;= <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Debug.Print <span class="string">&quot;While循环:&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">While</span> num &lt;= <span class="number">20</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">If</span> num Mod <span class="number">2</span> = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是偶数&quot;</span></span><br><span class="line"> <span class="keyword">Else</span></span><br><span class="line">    Debug.Print num &amp; <span class="string">&quot;是奇数&quot;</span></span><br><span class="line"> <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"> num = num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Wend</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制粘贴上述代码到VBA代码编辑窗口，如下图所示：</p>
<p><img src="/resource/10_1.png"></p>
<p>并点击运行按键运行，运行结果如下：</p>
<p><img src="/resource/10_2.png"></p>
<p>在立即窗口可以看到，不管采用何种循环形式，都是可以完成同样的任务的，因此，不同的循环形式，基本上是可以互相转换的。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA数据类型</title>
    <url>/2020/04/29/VBA%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>Hi，大家好，上一期使用VBA顺利完成了第一个程序，先简要分析下我们的第一个开工程序的代码，源代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub HelloWorld()</span><br><span class="line">Debug.Print &quot;Hello,world!&quot;</span><br><span class="line">MsgBox (&quot;Hello,world!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<p>虽然代码只有短短的几行，但是涉及到的信息还是不少的，其中如下结构是固定的，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub aaaaa()</span><br><span class="line">bbbbb</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>称之为Sub 过程，aaaa是过程的名字，可以随意取，可包含字母，数字，下划线等，不能与其他Sub重复，在Office 2013上验证还可以支持中文，但依然建议采用英文字母开头，不要使用中文名字，防止出现兼容性问题。</p>
<p>bbbbb则是过程中的语句，理论上应该是可以无数条的，但通常的原则是一个Sub过程只完成一个小功能，方便复用。</p>
<p>Debug.Print 是用来在下方的立即窗口输出代码调试信息的，不产生实际的作用。</p>
<p>MsgBox(“Hello,world！”) 则是弹出一个消息框，圆括号里面引号包含的部分就是弹出的消息框中显示的信息。</p>
<p>第一个VBA程序就是这么简单，复杂的任务也是同样的构造，只是复杂的任务被分解为多个Sub过程来协同完成而已。</p>
<p>好了，终于要开始接触编程的一个重要的概念了—<strong>变量</strong>，变量可以理解为一个空盒子，这个盒子里面可以放计算机能够识别的各种信息，而且这个盒子里面放的东西还是可以随时更换的。</p>
<p>为了处理起来方便，计算机对信息做了一些分类，常用的有一下几类：</p>
<ul>
<li>用于表示逻辑真，假的Boolean型，逻辑”真”用True表示，逻辑”假”用False表示</li>
<li>用来表示整数的Integer,Long,LongLong,这几个都用来表示整数，只是可以表示的范围值不一样</li>
<li>用来表示浮点数(俗称小数)的Signal,Double，这几个都是用来表示浮点数的，只是表示的精度不太一样。</li>
<li>用来表示字符串的String类型</li>
</ul>
<p>既然变量是个盒子，那么如果同时有好几个不同变量的情况下，就需要有办法来区分这些不同的变量，那么最简单的办法就是通过给变量取个名字，同时，盒子里面装什么类型的信息也要同时先确定一下，方便管理，由此，我们可以引出变量的定义的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim 变量名 As 类型名</span><br></pre></td></tr></table></figure>

<p>其中变量名与上述过程名的命令规则是一样，都要求是可以随意取，但可包含字母，数字，下划线，建议使用字母开头。</p>
<p>如下都是有效的变量定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim BolName As Boolean</span><br><span class="line">Dim IntName As Integer</span><br><span class="line">Dim StrName As String</span><br><span class="line">Dim FltName As Single</span><br><span class="line">Dim DobName As Double</span><br></pre></td></tr></table></figure>

<p>盒子定义好了，那么现在要做的就是要把信息放进去，用术语来表达就是变量赋值，”=”左边是变量名，右边是需要放进去的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BolName &#x3D; True</span><br><span class="line">IntName &#x3D; 3</span><br><span class="line">StrName &#x3D; &quot;This is a String&quot;</span><br><span class="line">FltName &#x3D; 1.5</span><br><span class="line">DobName &#x3D; 2.05</span><br></pre></td></tr></table></figure>

<p>并在需要的时候，将信息取出来，也就是变量取值，这里仅仅是取出数据用于调试打印出来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Debug.Print BolName</span><br><span class="line">Debug.Print IntName</span><br><span class="line">Debug.Print StrName</span><br><span class="line">Debug.Print FltName</span><br><span class="line">Debug.Print DobName</span><br></pre></td></tr></table></figure>

<p>完整过程代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dim BolName As Boolean</span><br><span class="line">Dim IntName As Integer</span><br><span class="line">Dim StrName As String</span><br><span class="line">Dim FltName As Single</span><br><span class="line">Dim DobName As Double</span><br><span class="line">Sub Printtest()</span><br><span class="line">BolName &#x3D; True</span><br><span class="line">IntName &#x3D; 3</span><br><span class="line">StrName &#x3D; &quot;This is a String&quot;</span><br><span class="line">FltName &#x3D; 1.5</span><br><span class="line">DobName &#x3D; 2.05</span><br><span class="line">Debug.Print BolName</span><br><span class="line">Debug.Print IntName</span><br><span class="line">Debug.Print StrName</span><br><span class="line">Debug.Print FltName</span><br><span class="line">Debug.Print DobName</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<p>注意这里新定义了一个叫Printtest的子过程，所有的赋值语句和Debug.print语句都要放在某个子过程中才能执行。</p>
<p>将上述完整代码复制粘贴到新打开的VBA开发窗口的最上面，如下图所示：</p>
<p><img src="/resource/3_1.png"></p>
<p>并鼠标点击一下子过程Printtest中任意地反，让右上角窗口显示Printtest,点击编译运行图标，运行此子过程，可以看到在立即窗口输出了各变量之前的赋值，如下图所示：</p>
<p><img src="/resource/3_2.png"></p>
<p>这里就是VBA中变量的定义及赋值和取值的简单例子，后续还会有更多变量的类型和赋值，但基本上与这个形式是差不多。</p>
<p>如果大家有任何的疑问，可以在在下方留言噢~</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA数据运算</title>
    <url>/2020/05/12/VBA%E6%95%B0%E6%8D%AE%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了VBA的变量的定义及常用的数据类型，同时介绍了变量的取值和赋值操作，就像将信息放在盒子里保存起来，或者将保存的信息从盒子里取出来，但是仅仅保存或者取出信息显然是不够的，我们更多的时候还需要对原始信息进行进一步的加工，才能得到我们最终所需要的信息，</p>
<p>因为我们信息都是根据不同的数据类型存储在变量里面的，所以，对信息的进一步加工，就是对变量进行运算，不同的数据类型支持不同的运算格式，总的来说，VBA支持如下四种运算符:</p>
<ul>
<li>算术运算符</li>
<li>比较运算符</li>
<li>串联运算符</li>
<li>逻辑运算符</li>
</ul>
<p>我们先看一下运用的最多的算术运算符</p>
<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><strong>算术运算符</strong></h4><p>算术运算符，主要就是用来执行数学计算的运算符，主要包含加+，减-，乘*，除（整数除\，浮点除/），取余Mod，指数运算^ 这几项.<br><strong>加法运算符</strong> “+” ,用来对两个数进行加法运算，从而的到两个数的和，具体的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">result &#x3D; num1 + num2</span><br></pre></td></tr></table></figure>
<p>其中num1 和num2分别是需要相加的变量，sum为运算得到的总和的变量，变量名是可以是任意取的，并且num1 和num2分别可以为整数，单精度浮点数，双精度浮点数等,下同<br><strong>减法运算符</strong>“-“,用来对两个数进行减法运算，从而的到两个数的差，具体的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = num1 - num2</span><br></pre></td></tr></table></figure>
<p><strong>乘法运算符</strong>“*”,用来对两个数进行乘法运算，从而的到两个数的积，具体的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = num1*num2</span><br></pre></td></tr></table></figure>

<p><strong>整数除法运算符</strong>“\“, 用来对两个数进行除法操作，但是得到的值只保留整数部分，具体的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = num1\num2</span><br></pre></td></tr></table></figure>

<p> <strong>浮点除法运算符</strong>“/“,用来对两个数进行除法操作，但是的到的值是个浮点数，具体的语法如下：</p>
<figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line">result = num1/num2</span><br></pre></td></tr></table></figure>

<p><strong>取余运算符</strong>“Mod”,用来对两个数进行除法操作，然后返回整除之后的余数部分，具体的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = num1 Mod num2</span><br></pre></td></tr></table></figure>

<p><strong>幂指数运算符</strong>“^”,用来求幂指数运算操作，返回指数幂的结果，具体语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = num1 ^ num2</span><br></pre></td></tr></table></figure>

<p>下面，我们用一小段代码来演示一下上面提到的各种常用的运算符，复制如下代码到VBA开发环境的代码编辑框中(戳这里了解VBA运行环境构建)，</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> Optest()</span><br><span class="line"><span class="keyword">Dim</span> sum1 As Integer</span><br><span class="line"><span class="keyword">Dim</span> sum2 As Single</span><br><span class="line"><span class="keyword">Dim</span> num1 As Integer</span><br><span class="line"><span class="keyword">Dim</span> num2 As Integer</span><br><span class="line"><span class="keyword">Dim</span> num3 As Single</span><br><span class="line"><span class="keyword">Dim</span> num4 As Single</span><br><span class="line">num1 = <span class="number">5</span></span><br><span class="line">num2 = <span class="number">3</span></span><br><span class="line">num3 = <span class="number">2.5</span></span><br><span class="line">num4 = <span class="number">5.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;加法运算</span></span><br><span class="line">sum1 = num1 + num2</span><br><span class="line">sum2 = num3 + num4</span><br><span class="line">Debug.Print sum1</span><br><span class="line">Debug.Print sum2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;减法运算</span></span><br><span class="line">sum1 = num1 - num2</span><br><span class="line">sum2 = num3 - num4</span><br><span class="line">Debug.Print sum1</span><br><span class="line">Debug.Print sum2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;乘法运算</span></span><br><span class="line">sum1 = num1 * num2</span><br><span class="line">sum2 = num3 * num4</span><br><span class="line">Debug.Print sum1</span><br><span class="line">Debug.Print sum2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;除法运算</span></span><br><span class="line">sum1 = num1 \ num2</span><br><span class="line">sum2 = num1 / num2</span><br><span class="line">Debug.Print sum1</span><br><span class="line">Debug.Print sum2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;取余运算</span></span><br><span class="line">sum1 = num1 Mod num2</span><br><span class="line">Debug.Print sum1</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;幂指数运算</span></span><br><span class="line">sum2 = num1 ^ num2</span><br><span class="line">Debug.Print sum2</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="/4_1.png" alt="4_1"></p>
<p>点击运行Optest子程序，在立即窗口可以得到如下运行结果：</p>
<p><img src="/resource/4_2.png"></p>
<p>可以看到，立即窗口打印出来的值分别对应着如下的运算</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>+<span class="number">3</span> = <span class="number">8</span>          </span><br><span class="line"><span class="number">2.5</span>+<span class="number">5.3</span> = <span class="number">7.8</span></span><br><span class="line"><span class="number">5</span><span class="number">-3</span> = <span class="number">2</span></span><br><span class="line"><span class="number">2.5</span><span class="number">-5.3</span> = <span class="number">-2.8</span></span><br><span class="line"><span class="number">5</span>*<span class="number">3</span>=<span class="number">15</span></span><br><span class="line"><span class="number">2.5</span>*<span class="number">5.3</span>=<span class="number">13.25</span></span><br><span class="line"><span class="number">5</span>\<span class="number">3</span>=<span class="number">1</span>         <span class="comment">//这里是整除，只保留整数部分</span></span><br><span class="line"><span class="number">5</span>/<span class="number">3</span>=<span class="number">1.666667</span>  <span class="comment">//这里是浮点除，保留了小数部分</span></span><br><span class="line"><span class="number">5</span> Mod <span class="number">3</span> = <span class="number">2</span>   <span class="comment">//这里是5除以3，商为1，余数为2，因此得到的结果就是余数2</span></span><br><span class="line"><span class="number">5</span>^<span class="number">3</span>= <span class="number">125</span>      <span class="comment">//这里表示5的3次方，也就是5*5*5=125</span></span><br></pre></td></tr></table></figure>

<p>常用的算术运算符就是这些了，大家掌握了吗？</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA数据运算续2</title>
    <url>/2020/05/13/VBA%E6%95%B0%E6%8D%AE%E8%BF%90%E7%AE%97%E7%BB%AD2/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了数据运算中的算术运算符，也就是常见的加减乘除等等，今天再继续介绍另一个常用的运算符–比较运算符。</p>
<p>在介绍比较运算符之前，需要先了解一下表达式的概念。</p>
<p><strong>表达式</strong>是由变量，常量，运算符等组合起来的一个算式，类似于加减乘除的混合运算，经过计算之后，可以得到一个结果，得到的结果可以是整型数据，浮点数据，布尔型数据等等。</p>
<p><strong>比较运算符</strong></p>
<p>比较运算符主要就是用来比较两个表达式的大小，是否相等的运算，是否相等的运算，返回的结果为布尔值，也就是只有真和假这两种值,有以下6种常用的运算符：</p>
<p><img src="/resource/5_3.png"></p>
<p>以第一个”&lt;”比较运算符为例进行说明，当需要检查表达式expr1是否小于表达是expr2时，可以通过如下语法表示:</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">expr1 &lt; expr2 </span><br></pre></td></tr></table></figure>

<p>程序会分别自动计算expr1和expr2这两个表达式的值，然后比较计算出来的表达式的值，当表达式expr1的值确实比表达式expr2的值要小时，则整个运算返回的结果是布尔值”True”, 反之，当表达式expr1的值大于或者等于表达式expr2的值时，则返回布尔值”False”</p>
<p>其他的几个比较运算符也是一样的流程，这里不再赘述，通过如下代码可以看到比较运算符的实际应用：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> CompTest()</span><br><span class="line"><span class="keyword">Dim</span> expr1 As Integer</span><br><span class="line"><span class="keyword">Dim</span> expr2 As Integer</span><br><span class="line"><span class="keyword">Dim</span> expr3 As Integer</span><br><span class="line">expr1 = <span class="number">1</span></span><br><span class="line">expr2 = <span class="number">2</span></span><br><span class="line">expr3 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Debug.Print expr1 &lt; expr2</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &lt; expr1</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &lt;= expr3</span><br><span class="line"></span><br><span class="line">Debug.Print expr1 &gt; expr2</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &gt;= expr3</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 = expr3</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &lt;&gt; expr3</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制粘贴上述事例代码到VBA代码编辑窗口，如下图所示：</p>
<p><img src="/resource/5_1.png"></p>
<p>点击运行代码，可以得到如下图所示结果：</p>
<p><img src="/resource/5_2.png"></p>
<p>可以看到底下的立即窗口打印了不同的比较运算符的结果。</p>
<p>如下代码定义了三个变量,分别赋值为1,2,2</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Dim</span> expr1 As Integer</span><br><span class="line"><span class="keyword">Dim</span> expr2 As Integer</span><br><span class="line"><span class="keyword">Dim</span> expr3 As Integer</span><br><span class="line">expr1 = <span class="number">1</span></span><br><span class="line">expr2 = <span class="number">2</span></span><br><span class="line">expr3 = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>如下代码则分别调用不同的比较运算符，对三个不同的变量执行比较运算，并通过立即窗口打印比较运算的结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Debug.Print expr1 &lt; expr2    // 1 小于 2 比较运算结果为真</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &lt; expr1   //2 小于 1 比较运算结果为假</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &lt;= expr3  // 2 小于等于 2 比较运算结果为真</span><br><span class="line"></span><br><span class="line">Debug.Print expr1 &gt; expr2    //1 大于 2 比较运算结果为假</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &gt;= expr3    //2大于等于 2 比较运算结果为真</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 = expr3    //2 等于 2 比较运算结果为真</span><br><span class="line"></span><br><span class="line">Debug.Print expr2 &lt;&gt; expr3  //2 不等于 2 比较运算结果为假</span><br></pre></td></tr></table></figure>

<p>表达式和比较运算符应用的范围很广，在后续的很多场合都可以看到表达式和比较运算符的应用，这里只是简单介绍了比较运算符的语法及使用，后面会看到更多比较运算符的例子。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA数据运算续3</title>
    <url>/2020/05/20/VBA%E6%95%B0%E6%8D%AE%E8%BF%90%E7%AE%97%E7%BB%AD3/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了数据运算中的比较运算符，主要用于比较两个表达式的大小，是否相等等，比较运算符的比较结果为逻辑真或者逻辑假(对于VBA来说，则为布尔值”True”和布尔值”False”).</p>
<p>那么问题来了，对于多个比较运算结果的比较结果，如果想进一步处理，也就是布尔值的运算的话，则涉及到另外一个运算符–逻辑运算符。</p>
<p>逻辑运算符主要用于对两个逻辑表达式(可以理解为返回值为布尔值的表达式)进行运算，同时返回值同样为布尔值。</p>
<p>常用的逻辑运算符有”<strong>与And</strong>“ , “<strong>或</strong>Or” , “<strong>非</strong>Not”，”<strong>异或</strong>Xor”运算，同时VBA还提供了两个不太常用的逻辑运算符”<strong>等价</strong>Eqv”, “<strong>蕴含</strong>Imp”，下面我们分别来看看各逻辑运算符的具体语法及运算规则。</p>
<p>“<strong>与And</strong>“运算符主要是对两个逻辑表达式执行与运算，语法为：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = expr1 <span class="keyword">And</span> expr2</span><br></pre></td></tr></table></figure>

<p>其中expr1 和expr2可以为任意的布尔值，与运算的运算规则为：只有当expr1为布尔真，且expr2为布尔真时，整个And的运算结果才为真，否则运算结果为假，详细情况如以下真值表：</p>
<p><img src="/resource/6_1.png"></p>
<p>“<strong>或Or</strong>“运算符主要是对两个逻辑表达式执行或运算，语法为：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = expr1 <span class="keyword">Or</span> expr2</span><br></pre></td></tr></table></figure>

<p>其中expr1 和expr2可以为任意的布尔值,或运算的运算规则为：只要expr1或者expr2中有有任意一个为真，则或运算的运算结果就为真，只有当expr1和expr2均为假时，整个表达式才为假，详细的真值表如下：</p>
<p><img src="/resource/6_2.png"></p>
<p><strong>异或Xor</strong>运算符主要是对两个表达式执行异或运算，语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = expr1 <span class="keyword">Xor</span> expr2</span><br></pre></td></tr></table></figure>

<p>其中expr1 和expr2可以为任意的布尔值,异或运算的运算规则为：只有当expr1或者expr2中两个表达式的真值不相同时，整个表达式才为真，否则为假，异或运算也称为不带进位的加法，当然这里的指的是2进制的加法，也就是逢2就进位，与10进制的逢10进位类似。详细的真值表如下：</p>
<p><img src="/resource/6_3.png"></p>
<p><strong>等价</strong>Eqv运算符主要是对两个逻辑表达式执行等价运算，这个是VBA中特有的，语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = expr1 Eqv expr2</span><br></pre></td></tr></table></figure>

<p>其中expr1 和expr2可以为任意的布尔值,等价运算的运算规则为：当两个表达式的真值等价时，整个表达式为真，否则为假，与上面的异或正好相反，具体的真值表如下：</p>
<p><img src="/resource/6_4.png"></p>
<p><strong>蕴含</strong>Imp运算符主要对两个表达式执行蕴含运算，这个也是VBA所特有的，语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = expr1 Imp expr2</span><br></pre></td></tr></table></figure>

<p>其中expr1 和expr2可以为任意的布尔值,蕴含运算的运算规则为：只有当expr1为真，并且expr2为假时，整个表达式值为假，其他情况均为真，具体的真值表如下：</p>
<p><img src="/resource/6_5.png"></p>
<p><strong>非</strong>Not运算符主要是对一个表达式进行非运算，具体的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">result = <span class="keyword">Not</span> expr1 </span><br></pre></td></tr></table></figure>

<p><strong>非</strong>Not运算符区别去上面的其他的逻辑运算符的地方就是非运算符为单目运算符，也就是他只需要一个操作数，也就是这里的expr1,运算规则就是对表达式进行取反操作，也就是当表达式为真时，非运算结果为假，当表达式为假时，非运算结果为真。</p>
<p>下面通过如下测试代码，看看各个运算符的一些运算结果，代码如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> Optest2()</span><br><span class="line"><span class="keyword">Dim</span> expr1 As Boolean</span><br><span class="line"><span class="keyword">Dim</span> expr2 As Boolean</span><br><span class="line"><span class="keyword">Dim</span> expr3 As Boolean</span><br><span class="line"><span class="keyword">Dim</span> result1 As Boolean</span><br><span class="line"><span class="keyword">Dim</span> result2 As Boolean</span><br><span class="line"></span><br><span class="line">expr1 = <span class="literal">True</span></span><br><span class="line">expr2 = <span class="literal">False</span></span><br><span class="line">expr3 = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;逻辑与运算</span></span><br><span class="line">result1 = expr1 <span class="keyword">And</span> expr2</span><br><span class="line">result2 = expr1 <span class="keyword">And</span> expr3</span><br><span class="line">Debug.Print result1</span><br><span class="line">Debug.Print result2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;逻辑或运算</span></span><br><span class="line">result1 = expr1 <span class="keyword">Or</span> expr2</span><br><span class="line">result2 = expr1 <span class="keyword">Or</span> expr3</span><br><span class="line">Debug.Print result1</span><br><span class="line">Debug.Print result2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;异或运算</span></span><br><span class="line">result1 = expr1 <span class="keyword">Xor</span> expr2</span><br><span class="line">result2 = expr1 <span class="keyword">Xor</span> expr3</span><br><span class="line">Debug.Print result1</span><br><span class="line">Debug.Print result2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;等价运算</span></span><br><span class="line">result1 = expr1 Eqv expr2</span><br><span class="line">result2 = expr1 Eqv expr3</span><br><span class="line">Debug.Print result1</span><br><span class="line">Debug.Print result2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;蕴含运算</span></span><br><span class="line">result1 = expr1 Imp expr2</span><br><span class="line">result2 = expr1 Imp expr3</span><br><span class="line">Debug.Print result1</span><br><span class="line">Debug.Print result2</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;非运算</span></span><br><span class="line">result1 = <span class="keyword">Not</span> expr1</span><br><span class="line">result2 = <span class="keyword">Not</span> expr2</span><br><span class="line">Debug.Print result1</span><br><span class="line">Debug.Print result2</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>复制上述代码到VBA的代码编辑窗口，如图所示：</p>
<p><img src="/resource/6_6.png"></p>
<p>点击运行，运行Optest2子程序，会在立即窗口打印表达式运算结果，如下图所示：</p>
<p><img src="/resource/6_7.png"></p>
<p>我们来分析一下运算结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">False        //expr1为真，expr2为假，与运算为假</span><br><span class="line">True        //expr1为真，expr3为真，与运算为真</span><br><span class="line">True        //expr1为真，expr2为假，或运算为真</span><br><span class="line">True        //expr1为真，expr3为真，或运算为真</span><br><span class="line">True        //expr1为真，expr2为假，异或运算为真</span><br><span class="line">False        //expr1为真，expr3为真，异或运算为假</span><br><span class="line">False        //expr1为真，expr2为假，等价算为假</span><br><span class="line">True        //expr1为真，expr3为真，等价算为真</span><br><span class="line">False        //expr1为真，expr2为假，蕴含算为假</span><br><span class="line">True        //expr1为真，expr3为真，蕴含算为真</span><br><span class="line">False        //expr1为真，非运算为假</span><br><span class="line">True        //expr2为假，非运算为真</span><br></pre></td></tr></table></figure>

<p>怎么样？逻辑运算符应该是很简单的，只要掌握了逻辑运算符的真值表，基本上就不会有问题了。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA流程控制介绍</title>
    <url>/2020/05/22/VBA%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Hi，大家好，前几期主要介绍了变量及变量的操作–数据运算，有了这些基础之后，我们开始介绍编程里面另外一个核心—流程控制。</p>
<p>到目前为止，此前展示的例子里面，其实我们已经用到了流程控制，只不过我们用的是顺序的流程控制，也就是自上而下，根据代码书写个顺序，一句一句的执行的的。</p>
<p>但因为有变量的存在，变量的值有可能是随时都有可能变化的，因此，如果还是一直按照顺序来执行，在有些情况下，就会出现不满足需求的情况，在这样的情况下，就需要引入分支流程控制。</p>
<p>分支流程控制的原理就是判断当前的逻辑表达式，根据逻辑表达式的真假，分别执行不同的流程，从而处理不同的情况。</p>
<p>VBA中分支流程控制主要有if语句及switch语句这两大类，先来看看if语句类。</p>
<p>if语句类有多种不同的形式，但是基本上都是在基础的形式上面进行扩展，因此重点是熟悉基础形式，if的基础形式有以下几种情况：</p>
<p><strong>If 形式1：</strong></p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> expr <span class="keyword">Then</span></span><br><span class="line"><span class="comment">&#x27;表达式为真时，需要执行的语句</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>

<p>形式1的运算顺序就是首先检查expr逻辑表达式是否为真，如果为真，则顺序执行Then和End If之间的语句。</p>
<p><strong>If形式2:</strong></p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> expr <span class="keyword">Then</span></span><br><span class="line"><span class="comment">&#x27;表达式为真时，需要执行的语句</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"><span class="comment">&#x27;表达式为假时，需要执行的语句</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>

<p>可以看到形式2与形式1相比，多了一个Else分支，多出来的Else分支主要用于处理表达式为假的情况。</p>
<p><strong>If形式3：</strong></p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> expr <span class="keyword">Then</span></span><br><span class="line"><span class="comment">&#x27;表达式为真时，需要执行的语句</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ElseIf</span> expr2 <span class="keyword">Then</span></span><br><span class="line"><span class="comment">&#x27;表达式expr为假，expr2表达式为真时，需要执行的语句</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"><span class="comment">&#x27;表达式expr 和expr2均为假时，需要执行的语句</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>

<p>形式3相比于形式2，又多了一个ElseIf 的分支，主要是用来处理上一个分支的表达式为假的情况,并且，Else If  Then 的分支是可以任意增加的。</p>
<p>下面通过一个具体的例子看看If分支选择的用法。</p>
<p>示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Sub Optest3()</span><br><span class="line">Dim person1 As Integer</span><br><span class="line">Dim person2 As Integer</span><br><span class="line">Dim person3 As Integer</span><br><span class="line"> </span><br><span class="line">person1 &#x3D; 20</span><br><span class="line">person2 &#x3D; 11</span><br><span class="line">person3 &#x3D; 3</span><br><span class="line"></span><br><span class="line">&#39;形式1</span><br><span class="line">If person1 &gt; 18 Then</span><br><span class="line">    Debug.Print &quot;person1 已经是成年人了&quot;</span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39;形式2</span><br><span class="line">If person2 &gt; 18 Then</span><br><span class="line">    Debug.Print &quot;person2 已经是成年人了&quot;</span><br><span class="line">Else</span><br><span class="line">    Debug.Print &quot;person2 是未成年人&quot;</span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#39;形式3:</span><br><span class="line">If person3 &gt; 18 Then</span><br><span class="line">    Debug.Print &quot;person3 已经是成年人了&quot;</span><br><span class="line">ElseIf person3 &gt; 6 Then</span><br><span class="line">    Debug.Print &quot;person3 已经是少年了&quot;</span><br><span class="line">Else</span><br><span class="line">    Debug.Print &quot;person3 是个婴幼儿&quot;</span><br><span class="line">End If</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<p>复制粘贴上述代码到VBA的代码编辑窗口，如下图所示：</p>
<p><img src="/resource/7_1.png"></p>
<p>点击运行按钮，运行Optest3子程序，在立即窗口得到如下图所示打印信息：</p>
<p><img src="/resource/7_2.png"></p>
<p>可以看到，形式1的例子中，person1因已经大于18岁了，所以输出</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">person1 已经是成年人了</span><br></pre></td></tr></table></figure>

<p>形式2的例子中，因person2不满足大于18的条件，因此，执行Else分支，所以输出</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">person2 是未成年人</span><br></pre></td></tr></table></figure>

<p>形式3的例子中，因person3既不满足大于18的条件，也不满足大于6的条件分支，因此只能执行最后的Else分支，所以输出</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">person3 是个婴幼儿</span><br></pre></td></tr></table></figure>

<p>If形式的流程控制语句的基本形式就是这几个，尤其是形式3,可以拓展很多，因此可以满足很复杂的流程控制的需求。</p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA流程控制介绍续2</title>
    <url>/2020/06/08/VBA%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%BB%8D%E7%BB%AD2/</url>
    <content><![CDATA[<p>Hi，大家好，上一期介绍了分支控制流程中的if语句，今天继续介绍分支流程控制的另外一个形式—switch语句</p>
<p>switch语句的功能与if语句类似，也有两种基本的形式。</p>
<p>形式1的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> expr</span><br><span class="line"><span class="keyword">Case</span> exprlist1</span><br><span class="line"><span class="keyword">Case</span> exprlist2</span><br><span class="line"><span class="keyword">End</span>  <span class="keyword">Select</span></span><br></pre></td></tr></table></figure>

<p>其中expr要求为数值表达式或者字符串表达式</p>
<p>exprlist1，exprlist2 为expr可能的取值或者可能的取值的范围的表达式。</p>
<p>Select case的工作流程如下：</p>
<a id="more"></a>
<p>首先计算expr的值，当expr的值与exprlist1的值相同，或者在exprlist1的范围内，则执行执行Case exprlist1后面的语句。</p>
<p>如果expr的值不满足exprlist1的要求，则继续检查是否满足exprlist2的要求，如果满足exprlist2的要求，这执行Case exprlist2的语句。</p>
<p>同理，还可以自行添加更多的Case在后面。</p>
<p>这里可以看出来，添加的不同的Case的顺序很重要，都是在不满足上一个Case的条件下，再继续往下验证下一个Case的，因此有些情况下，要注意Case的顺序，尤其是针对Case的条件是范围值的时候。</p>
<p>有的时候，Case异常的多，全部写出来达到了成百上千条的那种，总不能每一条都写出来吧，因此对于这样的情况，就引出来另外一种Select Case的形式。</p>
<p>形式2的语法如下：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> expr</span><br><span class="line"><span class="keyword">Case</span> exprlist1</span><br><span class="line"><span class="keyword">Case</span> exprlist2</span><br><span class="line"><span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line"><span class="keyword">End</span>  <span class="keyword">Select</span></span><br></pre></td></tr></table></figure>

<p>从形式2的语法上来看，与形式1的语法就在最后相差一下Case Else，别小看这一点点差别，能处理的Case就大大增强了。</p>
<p>注意这的Case Else只能放在最后，用于处理都不满足前面的Case的情况。</p>
<p>下面通过一个具体的例子看看实际的应用。</p>
<p>实例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub Optest4()</span><br><span class="line"></span><br><span class="line">Dim age As Integer</span><br><span class="line"> </span><br><span class="line">age &#x3D; 20</span><br><span class="line"></span><br><span class="line">Select Case age</span><br><span class="line"></span><br><span class="line">Case 10</span><br><span class="line">    Debug.Print &quot;已经10岁啦&quot;</span><br><span class="line">    </span><br><span class="line">Case Is &gt;&#x3D; 18</span><br><span class="line">    Debug.Print &quot;已经是成年人了&quot;</span><br><span class="line">    </span><br><span class="line">Case Is &gt;&#x3D; 6</span><br><span class="line">    Debug.Print &quot;是青少年了&quot;</span><br><span class="line">    </span><br><span class="line">Case Else</span><br><span class="line">    Debug.Print &quot;是婴幼儿&quot;</span><br><span class="line">    </span><br><span class="line">End Select</span><br><span class="line"></span><br><span class="line">End Sub</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复制粘贴上述代码到VBA代码编辑窗口，如下图所示：</p>
<p><img src="/resource/8_1.png"></p>
<p>点击运行按钮，并查看运行结果如下：</p>
<p><img src="/resource/8_2.png"></p>
<p>可以看到当age=20的时候，首先对比第一个Case,由于第一个Case为10，不匹配，因此继续往下对比第二个Case， 20正好大于等于18，因此匹配到了第二个Case，并执行第二个Case的输出语句，也就是输出”已经是成年人了”,此时Case 对比结束，退出Select对比。</p>
<p>大家可以将age分别修改为5,10,15等不同的值，然后保存并运行，看看匹配的Case。</p>
<p>提示：</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">age = <span class="number">5</span>  <span class="comment">&#x27;匹配的是Case Else, 输出 &quot;是婴幼儿&quot;</span></span><br><span class="line">age = <span class="number">10</span> <span class="comment">&#x27;匹配的是Case 10, 输出 &quot;已经10岁啦&quot;</span></span><br><span class="line">age = <span class="number">15</span> <span class="comment">&#x27;匹配的是Case Is &gt;= 6,输出 &quot;是青少年了&quot;</span></span><br></pre></td></tr></table></figure>

<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
  <entry>
    <title>VBA第一个程序</title>
    <url>/2020/04/28/VBA%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>Hi，大家好，自从上一期我们成功开启了Office的开发者模式后，就等于是拿到隐藏的绝世武功的秘籍，通往高手之路已经完成了第一步，接下来的就要开启修炼之路了。</p>
<p>在码农界，有个传统，就是运行的第一个程序，是要输出”Hello world!”，我姑且称之为开工仪式吧，所以我们也继续遵循并发扬这个传统，从”Hello,world”开始高手之路。</p>
<p>千万不要小瞧这个开工仪式，要是顺利，后面的学习之路也会更加顺畅噢~</p>
<p>好了，让我们沐浴更衣准备开始吧~</p>
<p>这里还是以Word为例来演示，首先，新建并打开Word文档，点击<strong>开发工具</strong>（没找到的话，戳这里进一步了解），然后点击Visual Basic按钮</p>
<p><img src="/resource/2_1.png"></p>
<p>一切顺利的话，就看到打开了一个以前从来没见过的页面，并且看起来很高级的样子，可以认为是一个集成开发环境（IDE），可能界面略微有点不一样，不影响，后面会重新调整</p>
<p><img src="/resource/2_2.png"></p>
<p>点击左上角的<strong>视图</strong>菜单，然后点击代码窗口和立即窗口</p>
<p><img src="/resource/2_3.png"></p>
<p>正确开启代码窗口和立即窗口之后的界面如下：</p>
<p><img src="/resource/2_4.png"></p>
<p>这个就是我们后续主要工作的窗口了，后续的代码基本上都是在在这个窗口完成。</p>
<p>复制如下代码到代码窗口中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub HelloWorld()</span><br><span class="line">Debug.Print &quot;Hello,world!&quot;</span><br><span class="line">MsgBox (&quot;Hello,world!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure>

<p><img src="/resource/2_5.png"></p>
<p>点击如下三角图标，运行第一个程序</p>
<p><img src="/resource/2_6.png"></p>
<p>不出意外的话，会弹出一个小小的对话框，并且在立即窗口会输出Hello，world!</p>
<p><img src="/resource/2_7.png"></p>
<p>如果您成功看到这两个输出，恭喜您，您的第一个程序运行正常，开工仪式顺利完成了！</p>
<p>此时如果想保留这部分代码的话，Word文档在保存的时候，保存的类型需要选择为.docm</p>
<p><img src="/resource/2_8.png"></p>
<p>觉得有用吗？想了解更多吗？下方扫码关注喔！</p>
<p><img src="/resource/wechat.jpg"></p>
]]></content>
      <tags>
        <tag>VBA编程基础</tag>
      </tags>
  </entry>
</search>
